建立在QUIC之上的HTTP/2
==========================

由于QUIC将各种HTTP / 2机制与传输机制集成在一起，因此QUIC实现了许多在HTTP / 2中也指定的功能。
因此，QUIC允许HTTP / 2机制被QUIC的实现取代，从而降低了HTTP / 2协议的复杂性。
本节简要介绍如何通过QUIC提供HTTP / 2语义实现。

流量管理
-------------------

当通过QUIC发送HTTP / 2报头和数据时，QUIC层处理大部分流管理。
HTTP / 2流ID由QUIC流ID替换。 使用QUIC时，HTTP / 2不需要进行
任何显式的流帧 - 通过QUIC流发送的数据只包含HTTP / 2报头或正文。
当QUIC流在相应方向上关闭时，认为请求和响应完成。

流控制由QUIC处理，不需要在HTTP / 2中重新实现。
QUIC的流量控制器取代了当前HTTP / 2部署中两个
级别不匹配的流量控制器 - 一个在HTTP / 2级别，另一个在TCP级别。

HTTP/2 头部压缩
------------------------

QUIC为HTTP / 2实现了HPACK头压缩[4]，遗憾的是，它引入了一些HOL（Head-of-Line）阻塞，
因为HTTP / 2头块必须按它们被压缩的顺序解压缩。

由于可以在接收器处以任意顺序处理流，因此通过使用流ID 3在专用报头流上发送所有报
头来强制执行对报头的严格排序。因此，使用QUIC的HTTP/2接收器仅在接收到报头流
上的相应报头之后才处理来自流的数据。

未来的工作将调整QUIC中的压缩器和解压缩器，以便压缩输出不依赖于未ack的先前压缩状态。
这可以通过创建HPACK状态的“检查点”来完成，这些检查点在标题被ack时更新。
压缩标头时，QUIC只会相对于先前的“检查点”进行压缩。


解析 HTTP/2 头部
-------------------------

在专用标头流上发送的字节只是HTTP / 2 HEADERS帧。
RFC 7540 [5]中描述了这些帧的确切布局。


持久连接
-------------------

与使用TCP时不同，QUIC的基础连接保证是持久的。 因此，HTTP“Connection”表头不适用。
为了获得最佳性能，预计客户端不会关闭QUIC连接，直到用户使用该连接加载完成了所有网页，
或者直到服务器关闭连接。


HTTP中的QUIC协商
------------------

'Alternate-Protocol'表头用于协商在未来的HTTP请求中使用QUIC。
要将QUIC指定为端口123上可用的备用协议，服务器将使用：::

    "Alternate-Protocol: 123:quic"

当客户端收到公告QUIC的备用协议表头'Alternate-Protocol'时，它可以尝试将QUIC用于该域上的未来安全连接。
由于中间盒和/或防火墙可以阻止QUIC和/或UDP通信，因此当QUIC可达性被破坏时，客户端应该优雅回退到使用传统的TCP。

注意，服务器可以使用多个字段值或'Alternate-Protocol'的逗号分隔字段值进行回复，以指示它支持的各种传输方式。

服务器还可以发送标头以通知不应在此域上使用QUIC。 如果它发送备用协议所需的头，客户端应该记住以后不在该域上使用QUIC，
并且不进行任何UDP探测以查看QUIC是否可用。